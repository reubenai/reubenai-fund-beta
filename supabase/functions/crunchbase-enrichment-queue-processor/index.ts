// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üîÑ [Queue Processor] Starting Crunchbase enrichment queue processing...');

    // Initialize Supabase client with service role key
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Step 1: Fetch queued records (limit to 10 for this batch)
    const { data: queuedRecords, error: fetchError } = await supabaseClient
      .from('deal2_enrichment_crunchbase_export')
      .select('*')
      .eq('processing_status', 'queued')
      .limit(10);

    if (fetchError) {
      console.log(`‚ùå [Queue Processor] Error fetching queued records: ${fetchError.message}`);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: `Failed to fetch queued records: ${fetchError.message}`,
          processed: 0
        }),
        { status: 500, headers: corsHeaders }
      );
    }

    if (!queuedRecords || queuedRecords.length === 0) {
      console.log('üìã [Queue Processor] No queued records found');
      return new Response(
        JSON.stringify({ 
          success: true, 
          message: 'No queued records to process',
          processed: 0
        }),
        { status: 200, headers: corsHeaders }
      );
    }

    console.log(`üìã [Queue Processor] Found ${queuedRecords.length} queued records to process`);

    let processedCount = 0;
    let errorCount = 0;

    // Step 2: Process each record
    for (const record of queuedRecords) {
      try {
        console.log(`üöÄ [Queue Processor] Processing record ${record.id} for deal ${record.deal_id}`);

        // Step 2a: Update status to 'processing'
        await supabaseClient
          .from('deal2_enrichment_crunchbase_export')
          .update({ 
            processing_status: 'processing',
            updated_at: new Date().toISOString()
          })
          .eq('id', record.id);

        // Step 3: Call the brightdata-crunchbase-enrichment function with proper authorization
        const enrichmentResponse = await supabaseClient.functions.invoke('brightdata-crunchbase-enrichment', {
          body: {
            dealId: record.deal_id,
            companyName: record.company_name,
            crunchbaseUrl: record.crunchbase_url
          },
          headers: {
            'Authorization': `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')}`
          }
        });

        if (enrichmentResponse.error) {
          console.log(`‚ùå [Queue Processor] Enrichment failed for record ${record.id}: ${enrichmentResponse.error}`);
          
          // Update record status to failed
          await supabaseClient
            .from('deal2_enrichment_crunchbase_export')
            .update({ 
              processing_status: 'failed',
              error_details: enrichmentResponse.error.toString(),
              updated_at: new Date().toISOString()
            })
            .eq('id', record.id);
          
          errorCount++;
        } else {
          console.log(`‚úÖ [Queue Processor] Successfully processed record ${record.id}`);
          processedCount++;
        }

      } catch (processingError) {
        console.log(`‚ùå [Queue Processor] Processing error for record ${record.id}: ${processingError.message}`);
        
        // Update record status to failed
        await supabaseClient
          .from('deal2_enrichment_crunchbase_export')
          .update({ 
            processing_status: 'failed',
            error_details: processingError.message,
            updated_at: new Date().toISOString()
          })
          .eq('id', record.id);
        
        errorCount++;
      }

      // Add a small delay between processing to prevent rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log(`üèÅ [Queue Processor] Processing complete. Processed: ${processedCount}, Errors: ${errorCount}`);

    // Log activity if any records were processed
    if (processedCount > 0 || errorCount > 0) {
      try {
        await supabaseClient
          .from('activity_events')
          .insert({
            user_id: '00000000-0000-0000-0000-000000000000', // System user
            fund_id: '00000000-0000-0000-0000-000000000000', // System fund
            activity_type: 'enrichment_batch_processed',
            title: 'Crunchbase Enrichment Batch Processed',
            description: `Processed ${processedCount} records successfully, ${errorCount} errors`,
            context_data: {
              processor: 'crunchbase-enrichment-queue-processor',
              processed_count: processedCount,
              error_count: errorCount,
              total_records: queuedRecords.length
            },
            priority: 'low',
            occurred_at: new Date().toISOString()
          });
      } catch (activityError) {
        console.log(`‚ö†Ô∏è [Queue Processor] Failed to log activity: ${activityError.message}`);
        // Don't fail the whole operation for logging issues
      }
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        processed: processedCount,
        errors: errorCount,
        total_records: queuedRecords.length
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.log(`‚ùå [Queue Processor] Fatal error: ${error.message}`);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message,
        processed: 0
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});